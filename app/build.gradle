apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'AndResGuard'
//apply plugin: 'com.dx168.fastdex'

//引用完全自定义插件，名称就是插件模块META-INF/gradle-plugins/ 目录下 properties文件的名字
apply plugin: 'com.example.plugin'
apply plugin: 'com.example.asmplugin'

apply from: 'CommonUtil.gradle'

apply plugin: 'ReplaceAssetsPlugin'

apply from: "../CheckJenkinsParams.gradle"

ReplaceAssetsExt {

    enable = false
}
//编译时间
def static buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

//编译机器
def static hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}
//最新的commit版本
def revision() {
    def code = new ByteArrayOutputStream();
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code;
    }
    return code.toString()
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm:ss')
    return "local_time" + formattedDate
}

CustomPluginExt {

    enable = false
}
//andResGuard {
//    mappingFile = file("./resource_mapping.txt")
//    //mappingFile = null
//    use7zip = true
//    useSign = true
//    // It will keep the origin path of your resources when it's true
//    keepRoot = false
//    // If set, name column in arsc those need to proguard will be kept to this value
//    fixedResName = "arg"
//    // It will merge the duplicated resources, but don't rely on this feature too much.
//    // it's always better to remove duplicated resource from repo
//    mergeDuplicatedRes = true
//    whiteList = [
//            // your icon
//            "R.mipmap.ic_launcher",
//            //"R.drawable.icon",
//            // for fabric
//            "R.string.com.crashlytics.*",
//            "R.string.not_res_proguard",
//    ]
//    compressFilePattern = [
//            "*.png",
//            "*.jpg",
//            "*.jpeg",
//            "*.gif",
//    ]
//    sevenzip {
//        artifact = 'com.tencent.mm:SevenZip:1.2.21'
//        //path = "/usr/local/bin/7za"
//    }
//
//    /**
//     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
//     * to the path which assemble[Task] write to
//     **/
//    // finalApkBackupPath = "${project.rootDir}/final.apk"
//
//    /**
//     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
//     * Only works in V1signing, default value is "SHA-1"
//     **/
//    // digestalg = "SHA-256"
//}


project.property('IS_JENKINS')
println("In app/build.gradle rootProject.IS_JENKINS = " + rootProject.IS_JENKINS)
println("buildTime = " + buildTime())
android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.hm.gradledemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
    }

    signingConfigs {
        release {
            //读取gradle.properties的属性
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
        debug {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }


    /**
     * 构建类型
     */
    buildTypes {
        release {
            // Enables code shrinking for the release build type.
            //启用代码缩减功能
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        forTest {
            initWith debug

            ndk {
                abiFilters "armeaib"
            }

        }
    }

    // java版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    flavorDimensions "tier"
    /**
     * productFlavors代码块用来配置多个产品变种。这允许你使用不同的变种配置来覆盖defaultConfig代码块中的配置，从而你创建不同版本的App。
     *
     * 产品变种 + 构建类型 构建出来的就是构建变体
     */
//    productFlavors {
//        huawei {
//            dimension "tier"
//            applicationId "com.hm.huaweigradledemo"
//        }
//        mi {
//            dimension "tier"
//            applicationId "com.hm.migradledemo"
//        }
//        productFlavors.all {
//                //您可以在构建变体配置中为清单文件中的某些属性指定值，替换AndroidManifest.xml中的CHANNEL_NAME
//            flavor -> flavor.manifestPlaceholders = [CHANNEL_NAME: name]
//        }
//    }

    //重命名apk
    android.applicationVariants.all { variant ->
        println("variant.name = " + variant)
        variant.outputs.all { output ->

            //时间戳
            def timeNow
            def branchName
            int lastSplit = BRANCH.lastIndexOf("/")
            if (lastSplit != -1) {
                branchName = BRANCH.substring(lastSplit + 1)
            } else {
                branchName = BRANCH
            }
            //是否为Jenkins打包
            println("打包分支 = " + branchName + " , isJenkins = " + IS_JENKINS + " , APP_VERSION = " + APP_VERSION)
            if ("true" == IS_JENKINS) {
                //Jenkins打包的时间
                timeNow = BUILD_TIME
            } else {
                //本机打包的时间
                timeNow = getDate()
            }
            outputFileName = "${variant.name}-branch_${branchName}-${APP_VERSION}-${timeNow}.apk"
        }
    }

    println("configurations类型：" + configurations.getClass())
    /**
     * 使用方式查看这几个类
     * org.gradle.api.internal.artifacts.configurations.DefaultConfigurationContainer
     * org.gradle.api.internal.artifacts.configurations.ResolutionStrategyInternal
     * org.gradle.api.artifacts.ResolutionStrategy
     * 参考文档：https://www.jianshu.com/p/322472456915
     */
//    configurations.all {
//        resolutionStrategy.dependencySubstitution {
//            // Substitute project and module dependencies
//            substitute module('org.gradle:api') with project(':api')
//            substitute project(':util') with module('org.gradle:util:3.0')
//
//            // Substitute one module dependency for another
//            substitute module('org.gradle:api:2.0') with module('org.gradle:api:2.1')
//
//            resolutionStrategy.force 'asm:asm-all:3.3.1', 'commons-io:commons-io:1.4'
//        }
//    }

}

afterEvaluate {

    Task task = tasks.register('copyFiles', Copy) {
        from 'build/outputs/bundle/debug/app-debug.aab'
        into 'build/outputs/bundle/debug/'
        rename { String fileName ->
            fileName.replace('app-debug.aab', 'app-debug-copy.aab')
        }
        //rename 'app-debug.aab', 'app-debug-copy.aab'
    }.get()

    task.doFirst {
        println("copyFiles doFirst")
    }

    Task task1 = tasks.findByName('bundleDebug')

    if (task1 != null) {
        println("task1 = " + task1.name)
        task.dependsOn(task1)
    }

//    tasks.forEach {
//        println("task name = " + it.name)
//    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    //debugImplementation project(path: ':library')
}
repositories {
    mavenCentral()
}
