apply plugin: 'com.android.application'
//apply plugin: 'com.dx168.fastdex'
//编译时间
def static buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}
//编译机器
def static hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName;
}
//最新的commit版本
def revision() {
    def code = new ByteArrayOutputStream();
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code;
    }
    return code.toString()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.hm.gradledemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
    }

    signingConfigs {
        release {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
        debug {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    flavorDimensions "tier"
    //多渠道打包
    productFlavors {
        huawei {
            dimension "tier"
        }
        mi {
            dimension "tier"
        }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [CHANNEL_NAME: name]
        }
    }

    //重命名apk
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.name}-${variant.versionName}-${variant.buildType.name}.apk"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportVersion"
    testImplementation 'junit:junit:4.12'
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation project(path: ':library')
}
