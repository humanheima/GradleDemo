apply plugin: 'com.android.application'
//apply plugin: 'com.dx168.fastdex'
//编译时间
def static buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}
//编译机器
def static hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}
//最新的commit版本
def revision() {
    def code = new ByteArrayOutputStream();
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code;
    }
    return code.toString()
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd-HH:mm:ss')
    return "local_time" + formattedDate
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.hm.gradledemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
    }

    signingConfigs {
        release {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
        debug {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }


    }

    /**
     * 构建类型
     */
    buildTypes {
        release {
            // Enables code shrinking for the release build type.
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        forTest {
            initWith debug

            ndk {
                abiFilters "armeaib"
            }

        }
    }


    flavorDimensions "tier"
    /**
     * productFlavors代码块用来配置多个产品变种。这允许你使用不同的变种配置来覆盖defaultConfig代码块中的配置，从而你创建不同版本的App。
     *
     * 产品变种 + 构建类型 构建出来的就是构建变体
     */
    productFlavors {
        huawei {
            dimension "tier"
            applicationId "com.hm.huaweigradledemo"
        }
        mi {
            dimension "tier"
            applicationId "com.hm.migradledemo"
        }
        productFlavors.all {
                //您可以在构建变体配置中为清单文件中的某些属性指定值，替换AndroidManifest.xml中的CHANNEL_NAME
            flavor -> flavor.manifestPlaceholders = [CHANNEL_NAME: name]
        }
    }

    //重命名apk
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            //时间戳
            def timeNow
            def branchName
            int lastSplit = BRANCH.lastIndexOf("/")
            if (lastSplit != -1) {
                branchName = BRANCH.substring(lastSplit+1)
            } else {
                branchName = BRANCH
            }
            //是否为Jenkins打包
            println("打包分支 = " + branchName + " , isJenkins = " + IS_JENKINS + " , APP_VERSION = " + APP_VERSION)
            if ("true" == IS_JENKINS) {
                //Jenkins打包的时间
                timeNow = BUILD_TIME
            } else {
                //本机打包的时间
                timeNow = getDate()
            }
            outputFileName = "${variant.name}-branch_${branchName}-${APP_VERSION}-${timeNow}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportVersion"
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation project(path: ':library')
}
